
---
title: "Quarto Workshop"
author: "Ravi Kalia"
date: "2025-01-22"
format: 
  revealjs:
    embed-resources: true
    chalkboard: false
    theme: black
    transition: slide
    footer: "Quarto Workshop"
---

# Quest for Quality Quarto!


[![Click to enlarge](https://static.wixstatic.com/media/1b4916_3bf27c6d0fbb463d8afdd5cd72867019~mv2.jpg/v1/fill/w_568,h_676,al_c,q_85,usm_0.66_1.00_0.01,enc_auto/1b4916_3bf27c6d0fbb463d8afdd5cd72867019~mv2.jpg)](https://static.wixstatic.com/media/1b4916_3bf27c6d0fbb463d8afdd5cd72867019~mv2.jpg){.fragment .fade-in}


## Prerequisites {.smaller}

### Tools
- GitHub account
- Linux-like environment
- VSCode installed
- Git Configured
- Conda installed

### Skills
- Creating conda environments
- Comfort with Git & GitHub
- Branching (GitHub Flow)
- Posts answers and links in chat


## What is Quarto?
**Quarto** is a modern, interactive publishing system built on **pandoc**:

- Converts Markdown files to multiple formats:
  - html/rmarkdown/pdf
  - Reveal.js (slides, pptx)
  - Jupyter Notebooks (ipynb)
  - ePub, Typst, LaTex and more

origin: `org-mode` (Emacs) => `Sweave` / `knitr` => `RMarkdown` 

## Why Use Quarto?

- Focus on reproducibility
- Easy interactivity
- Flexible output formats
- Good processing of code blocks:
    * R
    * Python
    * Julia
    * ObservableJS


## Quarto Example Gallery

1. Open the [Quarto Examples Gallery](https://quarto.org/docs/gallery/).
2. Browse through the examples of:
   - Scientific reports
   - Data visualizations
   - Blogs
   - Interactive web apps

### Exercise
Identify one example to recreate during the workshop.



## Underlying Technology

Quarto: A transpiler that converts markdown to various formats. The foundational technologies are:

* Javascript (interactivity)
* HTML (markdown)
* CSS (fence divs)



## Installation

1. Install [Quarto](https://quarto.org/docs/get-started/) binary program 
2. Install the Quarto extension for VSCode:
   - Extensions > Search "Quarto" > Install
3. Command line install of quarto cli 

### Exercise
One, Two and Three.

WARNING: Quarto is under active development!

## Setting Up Your Environment

1. Create a new directory for the workshop:
   ```bash
   mkdir quarto-workshop
   cd quarto-workshop
   ```

2. Create a Conda environment:
   ```bash
   conda env create -p "$PWD/.conda" python=3.10 -y
   conda activate "$PWD/.conda"
   ```

3. Initialize Git:
   ```bash
   git init
   ```



## Write Markdown 

1. Write a small `example.md` file:
   ```markdown
   # Big Hello, Quarto!
   ## Smaller hello, quarto!
   ###### smallest hello, quarto!
   This is a demo of Markdown features:
   - **Bold text**
   - *Italic text*
   - [Links](https://quarto.org)
   - ![Image](https://picsum.photos/200/300)
   ```


## Markdown Code Blocks

Add code blocks: formatted but not executed in markdown.


Python

   ```python
   def greet(name):
      print(f"Hello, {name}!")
   ```
R

   ```r
   greet <- function(name) {
      print(paste("Hello", name))
   }
   ```

Javascript

   ```javascript
   function greet(name) {
      console.log(`Hello, ${name}!`);
   }
   ```

## Convert Markdown

Transpile `example.md` using quarto:

   ```bash
   quarto render example.md --to pdf
   quarto render example.md --to html
   quarto render example.md --to ipynb
   ```


### Exercise

Write and convert a markdown file to other format.



## Introducing qmd {.smaller}

Basic features:

* document metadata YAML format file header:

   ```yaml
   
   title: "blah"
   format: "html"
   date: "2025-01-22"
   
   ```

* `:::` fence blocks are used for quarto & custom [`css`](https://web.dev/learn/css) divs and classes
  - `::: {.class}`
  - `::: {#id}`
  - `::: {.class #id}`



## Example qmd {.smaller}

1. Write a small `example.qmd` file:
   ```markdown
   ---   
   title: "Demo"
   format: html
   ---
   # Hello, Quarto!
   ::: {.panel-tabset}
   ### Tab 1
   Content for tab 1.
   ### Tab 2
   Content for tab 2.
   :::
   ```

2. Render the file:
   ```bash
   quarto render example.qmd
   ```


### Exercise
Write a `.qmd` file with fenced divs.


## Simple qmd Code Blocks

Quarto supports executing code blocks in markdown files.

Python

```{python}
#| echo: true
def greet(name):
    print(f"Hello, {name}!")
greet("Quarto")
```

Javascript

```{javascript}
#| echo: true
console.log("Hello, Quarto!")
```

### Exercise  
Create a `.qmd` file with a Python and R code block.



## #| Code Blocks {.smaller}

The `#|` syntax adds control over code block execution & display.

   ```python
      #| echo: true
      #| warning: false
      def greet(name):
         print(f"Hello, {name}!")
   ```


| Option   | Description                                                                                          |
|----------|------------------------------------------------------------------------------------------------------|
| `#|eval`     | Evaluate the code chunk.                             |
| `#|echo`     | Include the source code in output.                                                                   |
| `#|output`   | Include the results of executing the code in the output (true, false, or asis). |
| `#|warning`  | Include warnings in the output.                                                                      |
| `#|error`    | Include errors in the output. |
| `#|include`  | Catch all for preventing any output (code or results) from being included. |


### Exercise
Create a `.qmd` file with a Python code block using the `#|` options like `echo`, `warning`, and `eval`.



## Create a Blog Project {.smaller}

1. Create a Quarto blog project:
   ```bash
   quarto create-project quarto-blog 
   ```

2. Initialize Git and create branches:
   ```bash
   git init
   git checkout -b blog-setup
   ```

### Exercise

- Create a blog project and explain the directory structure.
- What is  `_quarto.yml`?
- What is `posts` directory?
- What is  `style.css`?

## Create a Blog Conda Environment {.smaller}
1. Write an `environment.yml` file:

```yaml
 name: quarto-blog-conda
channels:
  - conda-forge
  - nodefaults
dependencies:
  - python=3.10
  - jupyter
  - matplotlib
  - numpy
  - scikit-learn
  - pandas
  - pip
  - pip:
      - quarto-cli
```

2. Activate the environment:
   ```bash
   conda env create -f environment.yml -p "$PWD/.conda"
   conda activate "$PWD/.conda"
   ```

### Exercise
Verify that your conda environment is active.


## Writing a Blog Post{.smaller}

1. Create a new `welcome.qmd` file in the `posts` folder:
   ```markdown
   ---
   title: "My First Blog Post"
   date: 2025-01-20
   ---

   # Welcome!
   
   This is my first blog post using Quarto. Here's a dummy classifer on breast cancer data.
   
   ```python
   import urllib.request

   gist_url = ("https://gist.githubusercontent.com/project-delphi/" 
   + 
   "aac6c2614e3ab4e07b5f41012e9f30e4/raw/")

   try:
      with urllib.request.urlopen(gist_url) as response:
         script_content = response.read().decode('utf-8')
      
      print("Executing the script...")
      exec(script_content)  # Execute the script
   except Exception as e:
      print(f"An error occurred: {e}")
   ```

## Preview & Render Blog Post

The preview is a live preview of the blog post in the browser. The render command generates the output file.

1. Preview:
   ```bash
   quarto preview posts/welcome.qmd
   ```

2. Render:
   ```bash
   quarto render posts/welcome.qmd
   ```

## Configure GitHub Pages

1. Configure `_quarto.yml`:
   
   ```yaml
   project:
     type: website
   publish:
     gh-pages:
       branch: gh-pages
   ```

2. Configure repo UI settings to publish from `gh-pages` branch

3. Push to GitHub:
   ```bash
   git add .
   git commit -m "Initial blog setup"
   git push origin blog-setup
   ```

4. Merge to `main` and deploy.



## Group Exercise: Collaborative Blog

1. Form groups of 3â€“4 persons, have one person who is advanced in github flow.
2. Each group member creates a branch:
   ```bash
   git checkout -b member_initials/feature-branch-name
   ```
3. Write posts in the `posts/` directory.
4. Merge branches to `main`.
5. Push and share your blog URL.



## Recap

- **Quarto** combines flexibility and reproducibility.
- Create professional blogs, reports, and more.
- Practice collaborative workflows with GitHub.

### Next Steps
- Explore advanced Quarto features.
- Build your personal portfolio site!



## Questions?

